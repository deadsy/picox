#!/usr/bin/env python3
"""
Generate lookup tables.
"""

import math
import sys

def gen_ydy_table(name, bits, func):
  """output a table with y and dy values"""
  n = 1 << bits
  print('/* generated by ./tools/lut.py */')
  print('#define %s_BITS (%dU)' % (name, bits))
  print('#define %s_SIZE (1U << %s_BITS)' % (name, name))
  print('static const int32_t %s_data[%s_SIZE << 1] = {' % (name, name))
  for i in range(n):
    if i == 0:
      sys.stdout.write('\t')
    if i != 0 and i % 4 == 0:
      sys.stdout.write('\r\n\t')
    (y, dy) = func(i)
    sys.stdout.write('%s, %s, ' % (y, dy))
  sys.stdout.write('\r\n};\r\n')

def q31_to_str(x):
  return '%d' % x

maxQ31 = (1 << 31) - 1
minQ31 = -(1 << 31)

def float_to_q31(x):
  xi = int(x * float(1 << 31))
  if xi > maxQ31:
    return maxQ31
  if xi < minQ31:
    return minQ31
  return xi

def cos_func(i, n):
  k = float(1 << n)
  y0 = math.cos(float(i) * 2.0 * math.pi / k)
  y1 = math.cos(float(i+1) * 2.0 * math.pi / k)
  i0 = float_to_q31(y0)
  i1 = float_to_q31(y1)
  y = q31_to_str(i0)
  dy = q31_to_str(i1 - i0)
  return (y, dy)

def main():
  n = 7
  gen_ydy_table('COS_LUT', n, lambda i: cos_func(i, n))

main()
